<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\LKS_MC_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\LKS_MC_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Mar 14 11:01:57 2024
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[49]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from interrupt.o(i.ADC_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[1e]">Btn1_Dowm_CallBack</a> from user_app.o(i.Btn1_Dowm_CallBack) referenced from user_app.o(i.USER_Init)
 <LI><a href="#[15]">CMP_IRQHandler</a> from interrupt.o(i.CMP_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[17]">DMA_IRQHandler</a> from interrupt.o(i.DMA_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[12]">GPIO_IRQHandler</a> from interrupt.o(i.GPIO_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[13]">HALL_IRQHandler</a> from interrupt.o(i.HALL_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup_lks32mc03x.o(.text) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[10]">I2C_IRQHandler</a> from interrupt.o(i.I2C_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[e]">MCPWM0_IRQHandler</a> from interrupt.o(i.MCPWM0_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[1c]">MCPWM0_RegUpdate</a> from signalchain_sample.o(i.MCPWM0_RegUpdate) referenced from foc_drive.o(i.FOC_InitstruParam)
 <LI><a href="#[f]">MCPWM1_IRQHandler</a> from interrupt.o(i.MCPWM1_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_lks32mc03x.o(.text) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_lks32mc03x.o(.text) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_lks32mc03x.o(.text) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[11]">SPI_IRQHandler</a> from interrupt.o(i.SPI_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_lks32mc03x.o(.text) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[19]">SW_IRQHandler</a> from interrupt.o(i.SW_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[1a]">SystemInit</a> from hardware_init.o(i.SystemInit) referenced from startup_lks32mc03x.o(.text)
 <LI><a href="#[c]">TIMER0_IRQHandler</a> from interrupt.o(i.TIMER0_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[d]">TIMER1_IRQHandler</a> from interrupt.o(i.TIMER1_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[14]">UART_IRQHandler</a> from interrupt.o(i.UART_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[18]">WAKE_IRQHandler</a> from interrupt.o(i.WAKE_IRQHandler) referenced from startup_lks32mc03x.o(RESET)
 <LI><a href="#[1f]">__main</a> from __main.o(!!!main) referenced from startup_lks32mc03x.o(.text)
 <LI><a href="#[1d]">read_btn1_level</a> from user_app.o(i.read_btn1_level) referenced from user_app.o(i.USER_Init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ef]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[100]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[101]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[102]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[103]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[104]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[105]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[106]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[107]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[108]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[21]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[110]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[27]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[112]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_lks32mc03x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc03x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc03x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc03x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc03x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lks32mc03x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[114]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPIRegulator
</UL>

<P><STRONG><a name="[115]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_ldivmod</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[116]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGetPhaseCurrent
</UL>

<P><STRONG><a name="[117]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[32]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
</UL>

<P><STRONG><a name="[118]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Create
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_number
</UL>

<P><STRONG><a name="[11c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
</UL>

<P><STRONG><a name="[11f]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[36]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[39]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
</UL>

<P><STRONG><a name="[3a]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
</UL>

<P><STRONG><a name="[3c]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[3b]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[120]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[121]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
</UL>

<P><STRONG><a name="[122]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[123]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[124]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[125]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[126]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[127]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
</UL>

<P><STRONG><a name="[44]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[43]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>

<P><STRONG><a name="[128]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[129]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
</UL>

<P><STRONG><a name="[12a]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[12b]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, interrupt.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ADC_IRQHandler &rArr; FOC_Model &rArr; AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterControl
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCurrentCheck
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcVoltPerUnitCalcInt
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAmplitudeCalc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lks32mc03x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[56]"></a>ADC_NormalModeCFG</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, signalchain_sample.o(i.ADC_NormalModeCFG))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[55]"></a>ADC_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc03x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[54]"></a>ADC_init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, hardware_init.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_init &rArr; ADC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NormalModeCFG
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[57]"></a>AdcSampleCal</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, foc_drive.o(i.AdcSampleCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGetPhaseCurrent
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentMagCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[7c]"></a>App2CoreCurTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app2core.o(i.App2CoreCurTrans))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[7f]"></a>App2CoreFreqTrans</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app2core.o(i.App2CoreFreqTrans))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVdcSpeed
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[5a]"></a>AutoFieldWeakReg</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fluxobserve.o(i.AutoFieldWeakReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AutoFieldWeakReg &rArr; FWLoopPIReg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWLoopPIReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[1e]"></a>Btn1_Dowm_CallBack</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, user_app.o(i.Btn1_Dowm_CallBack))
<BR>[Address Reference Count : 1]<UL><LI> user_app.o(i.USER_Init)
</UL>
<P><STRONG><a name="[e5]"></a>Button_Attach</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, button.o(i.Button_Attach))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[5c]"></a>Button_Create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, button.o(i.Button_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Button_Create &rArr; StrnCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrnCopy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Btn_Info
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Button
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[62]"></a>Button_Cycle_Process</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, button.o(i.Button_Cycle_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Button_Cycle_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Process
</UL>

<P><STRONG><a name="[61]"></a>Button_Process</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, button.o(i.Button_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Button_Process &rArr; Button_Cycle_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Cycle_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick20ms
</UL>

<P><STRONG><a name="[15]"></a>CMP_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, interrupt.o(i.CMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CMP_Init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, lks32mc03x_cmp.o(i.CMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[66]"></a>CMP_StructInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lks32mc03x_cmp.o(i.CMP_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[65]"></a>CMP_init</STRONG> (Thumb, 76 bytes, Stack size 120 bytes, hardware_init.o(i.CMP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CMP_init &rArr; CMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_StructInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[d4]"></a>Clock_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardware_init.o(i.Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e]"></a>CurrentAmplitudeCalc</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, fault_detection.o(i.CurrentAmplitudeCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentAmplitudeCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>CurrentLoopAxisD_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, state_machine.o(i.CurrentLoopAxisD_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentLoopAxisD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
</UL>

<P><STRONG><a name="[cf]"></a>CurrentLoopAxisQ_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, state_machine.o(i.CurrentLoopAxisQ_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentLoopAxisQ_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
</UL>

<P><STRONG><a name="[67]"></a>CurrentLoopReg</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, foc_drive.o(i.CurrentLoopReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CurrentLoopReg &rArr; ModuCircle_Limitation &rArr; Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuCircle_Limitation
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[59]"></a>CurrentMagCalc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_math.o(i.CurrentMagCalc))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
</UL>

<P><STRONG><a name="[6a]"></a>CurrentOffsetCalibration</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, system_init.o(i.CurrentOffsetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CurrentOffsetCalibration &rArr; ADC_init &rArr; ADC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_RegUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_NormalModeCFG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[68]"></a>CurrentPIRegulator</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pid_regulators.o(i.CurrentPIRegulator))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
</UL>

<P><STRONG><a name="[6b]"></a>DAC_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware_init.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[e9]"></a>DMA_CHx_EN</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lks32mc03x_dma.o(i.DMA_CHx_EN))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_init
</UL>

<P><STRONG><a name="[17]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>DMA_Init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lks32mc03x_dma.o(i.DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_init
</UL>

<P><STRONG><a name="[d8]"></a>DcVoltPerUnitCalc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fluxobserve.o(i.DcVoltPerUnitCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DcVoltPerUnitCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[4d]"></a>DcVoltPerUnitCalcInt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fluxobserve.o(i.DcVoltPerUnitCalcInt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>EraseSector</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, lks32mc03x_flash.o(i.EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWriteFlash
</UL>

<P><STRONG><a name="[6c]"></a>EraseWriteFlash</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, user_app.o(i.EraseWriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EraseWriteFlash &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick1ms
</UL>

<P><STRONG><a name="[83]"></a>FOC_InitstruParam</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, foc_drive.o(i.FOC_InitstruParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FOC_InitstruParam
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
</UL>

<P><STRONG><a name="[4c]"></a>FOC_Model</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, foc_drive.o(i.FOC_Model))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FOC_Model &rArr; AdcSampleCal &rArr; SVPWM_2ShuntGetPhaseCurrent &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVPWM_2ShuntGEN
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObserve
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenCloseAngleSwitch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>FWLoopPIReg</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, fluxobserve.o(i.FWLoopPIReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FWLoopPIReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFieldWeakReg
</UL>

<P><STRONG><a name="[73]"></a>FaultCheck</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, fault_detection.o(i.FaultCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FaultCheck &rArr; FaultStallCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultVoltageCheck
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultTempCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStartCheck
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultPhaseCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[4f]"></a>FaultCurrentCheck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fault_detection.o(i.FaultCurrentCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FaultCurrentCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>FaultInit</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, fault_detection.o(i.FaultInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[78]"></a>FaultPhaseCheck</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fault_detection.o(i.FaultPhaseCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FaultPhaseCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[c9]"></a>FaultRecover</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, fault_detection.o(i.FaultRecover))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FaultRecover
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateFault
</UL>

<P><STRONG><a name="[80]"></a>FaultRecoverInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fault_detection.o(i.FaultRecoverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FaultRecoverInit &rArr; User2AppVolTrans &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppVolTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[76]"></a>FaultStallCheck</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, fault_detection.o(i.FaultStallCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FaultStallCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[79]"></a>FaultStartCheck</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, fault_detection.o(i.FaultStartCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FaultStartCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[77]"></a>FaultTempCheck</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fault_detection.o(i.FaultTempCheck))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[75]"></a>FaultVoltageCheck</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fault_detection.o(i.FaultVoltageCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FaultVoltageCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
</UL>

<P><STRONG><a name="[90]"></a>FindQNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fluxobserve.o(i.FindQNum))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[81]"></a>FluxObserveInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_init.o(i.FluxObserveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FluxObserveInit &rArr; FluxObserveParaCalc &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_InitstruParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[82]"></a>FluxObserveParaCalc</STRONG> (Thumb, 1582 bytes, Stack size 64 bytes, fluxobserve.o(i.FluxObserveParaCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FluxObserveParaCalc &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindQNum
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
</UL>

<P><STRONG><a name="[c0]"></a>Flux_OBS_ParaInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fluxobserve.o(i.Flux_OBS_ParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObIni
</UL>

<P><STRONG><a name="[df]"></a>FunStateCharge</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, user_app.o(i.FunStateCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunStateCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick10ms
</UL>

<P><STRONG><a name="[12]"></a>GPIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lks32mc03x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GPIO_Init
</UL>

<P><STRONG><a name="[91]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, lks32mc03x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GPIO_Init
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lks32mc03x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterControl
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_btn1_level
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Speed
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lks32mc03x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterControl
</UL>

<P><STRONG><a name="[a8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lks32mc03x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterControl
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GPIO_Init
</UL>

<P><STRONG><a name="[93]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lks32mc03x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GPIO_Init
</UL>

<P><STRONG><a name="[92]"></a>GPIO_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, hardware_init.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[e0]"></a>GetHeartNTCTemp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, user_app.o(i.GetHeartNTCTemp))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick10ms
</UL>

<P><STRONG><a name="[95]"></a>GetVdcSpeed</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, user_app.o(i.GetVdcSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetVdcSpeed &rArr; User2AppFreqTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[96]"></a>Get_tempreture_num</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, temp_sample.o(i.Get_tempreture_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_tempreture_num &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick20ms
</UL>

<P><STRONG><a name="[13]"></a>HALL_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.HALL_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>HALL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lks32mc03x_hall.o(i.HALL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
</UL>

<P><STRONG><a name="[9b]"></a>HALL_Perip_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hardware_init.o(i.HALL_Perip_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HALL_Perip_Init &rArr; HALL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_StructInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[9c]"></a>HALL_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc03x_hall.o(i.HALL_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
</UL>

<P><STRONG><a name="[9d]"></a>Hardware_init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, hardware_init.o(i.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Hardware_init &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>HeaterControl</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, heatcontrol.o(i.HeaterControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HeaterControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HeaterControl_1ms</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, heatcontrol.o(i.HeaterControl_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HeaterControl_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick1ms
</UL>

<P><STRONG><a name="[db]"></a>HeaterTemperature_Control</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, heatcontrol.o(i.HeaterTemperature_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HeaterTemperature_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[10]"></a>I2C_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.I2C_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_state_over
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2C_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lks32mc03x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; i2c_dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[ae]"></a>I2C_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lks32mc03x_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_init
</UL>

<P><STRONG><a name="[a1]"></a>I2C_init</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, hardware_init.o(i.I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_init &rArr; I2C_Init &rArr; i2c_dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[af]"></a>IIC_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(i.IIC_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Write_Reg &rArr; i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_clean
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b1]"></a>Key_Speed</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, user_app.o(i.Key_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick1ms
</UL>

<P><STRONG><a name="[b2]"></a>LCD_Process</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, user_app.o(i.LCD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_Process &rArr; Temp_demarcate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_temp_gear
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_speed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_constant_temperature
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_number
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_data
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Reg
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_demarcate
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick20ms
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>MCPWM0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, interrupt.o(i.MCPWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MCPWM0_RegUpdate</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, signalchain_sample.o(i.MCPWM0_RegUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCPWM0_RegUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> foc_drive.o(i.FOC_InitstruParam)
</UL>
<P><STRONG><a name="[f]"></a>MCPWM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.MCPWM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>MCPWM_Init</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, lks32mc03x_mcpwm.o(i.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[ba]"></a>MCPWM_StructInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lks32mc03x_mcpwm.o(i.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[9e]"></a>MCPWM_init</STRONG> (Thumb, 146 bytes, Stack size 128 bytes, hardware_init.o(i.MCPWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[e6]"></a>MemoryRestore</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, user_app.o(i.MemoryRestore))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[69]"></a>ModuCircle_Limitation</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fluxobserve.o(i.ModuCircle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModuCircle_Limitation &rArr; Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopReg
</UL>

<P><STRONG><a name="[bb]"></a>NTC_R_change</STRONG> (Thumb, 978 bytes, Stack size 16 bytes, temp_sample.o(i.NTC_R_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NTC_R_change &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick20ms
</UL>

<P><STRONG><a name="[ca]"></a>OnTheFlyDetectInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fluxobserve.o(i.OnTheFlyDetectInit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[71]"></a>OpenCloseAngleSwitch</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, fluxobserve.o(i.OpenCloseAngleSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OpenCloseAngleSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[c5]"></a>OpenLoopCurRamp</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, process_control.o(i.OpenLoopCurRamp))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
</UL>

<P><STRONG><a name="[a0]"></a>PGA_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hardware_init.o(i.PGA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PGA_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[51]"></a>PWMOutputs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lks32mc03x_mcpwm.o(i.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateFault
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCurrentCheck
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultVoltageCheck
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStartCheck
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultStallCheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultPhaseCheck
</UL>

<P><STRONG><a name="[bf]"></a>PmsmFluxObIni</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, fluxobserve.o(i.PmsmFluxObIni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PmsmFluxObIni
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flux_OBS_ParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[70]"></a>PmsmFluxObserve</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, fluxobserve.o(i.PmsmFluxObserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PmsmFluxObserve
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[6e]"></a>ProgramPage</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lks32mc03x_flash.o(i.ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWriteFlash
</UL>

<P><STRONG><a name="[11]"></a>SPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SVPWM_2ShuntGEN</STRONG> (Thumb, 310 bytes, Stack size 28 bytes, lib_svpwm.o(i.SVPWM_2ShuntGEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SVPWM_2ShuntGEN
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
</UL>

<P><STRONG><a name="[58]"></a>SVPWM_2ShuntGetPhaseCurrent</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, signalchain_sample.o(i.SVPWM_2ShuntGetPhaseCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SVPWM_2ShuntGetPhaseCurrent &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcSampleCal
</UL>

<P><STRONG><a name="[19]"></a>SW_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SW_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lks32mc03x_sys.o(i.SYS_AnalogModuleClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempSensor_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PGA_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_init
</UL>

<P><STRONG><a name="[64]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lks32mc03x_sys.o(i.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Perip_Init
</UL>

<P><STRONG><a name="[ac]"></a>SYS_SoftResetModule</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lks32mc03x_sys.o(i.SYS_SoftResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[c1]"></a>Search_Button</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, button.o(i.Search_Button))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Btn_Info
</UL>

<P><STRONG><a name="[a3]"></a>SoftDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, task_scheduler.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[c2]"></a>SpeedLoopReg</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, foc_drive.o(i.SpeedLoopReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SpeedLoopReg &rArr; SpeedPIRegulator &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedPIRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[d1]"></a>SpeedLoop_Set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, state_machine.o(i.SpeedLoop_Set))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
</UL>

<P><STRONG><a name="[c3]"></a>SpeedPIRegulator</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, pid_regulators.o(i.SpeedPIRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SpeedPIRegulator &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedLoopReg
</UL>

<P><STRONG><a name="[cd]"></a>SpeedReferenceGen</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, process_control.o(i.SpeedReferenceGen))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
</UL>

<P><STRONG><a name="[c4]"></a>StateAlign</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, state_machine.o(i.StateAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StateAlign &rArr; User2AppCurTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenLoopCurRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[c6]"></a>StateCharge</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, state_machine.o(i.StateCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[c8]"></a>StateFault</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, state_machine.o(i.StateFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StateFault &rArr; FaultRecover
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecover
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[c7]"></a>StateInit</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, state_machine.o(i.StateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StateInit &rArr; FaultInit &rArr; User2AppVolTrans &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PmsmFluxObIni
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTheFlyDetectInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[cc]"></a>StateOpen</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, state_machine.o(i.StateOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StateOpen &rArr; User2AppFreqTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedReferenceGen
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreFreqTrans
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisQ_Set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[d0]"></a>StateRun</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, state_machine.o(i.StateRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = StateRun &rArr; SpeedLoopReg &rArr; SpeedPIRegulator &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedLoopReg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoFieldWeakReg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App2CoreCurTrans
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedLoop_Set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisQ_Set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoopAxisD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[d3]"></a>StateStop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, state_machine.o(i.StateStop))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>Sys_State_Machine</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, state_machine.o(i.Sys_State_Machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Sys_State_Machine &rArr; StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateStop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateFault
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateCharge
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[1a]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, hardware_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, interrupt.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>TIM_TimerInit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lks32mc03x_timer.o(i.TIM_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[e7]"></a>TIM_TimerStrutInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lks32mc03x_timer.o(i.TIM_TimerStrutInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTimer_init
</UL>

<P><STRONG><a name="[d6]"></a>Task_Scheduler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, task_scheduler.o(i.Task_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLoadForFlashing
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick500ms
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick20ms
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick1ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_APP_vTick10ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_circulation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterTemperature_Control
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVdcSpeed
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcVoltPerUnitCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>TempSensor_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hardware_init.o(i.TempSensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TempSensor_Init &rArr; SYS_AnalogModuleClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[dc]"></a>Temp_circulation</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, user_app.o(i.Temp_circulation))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[b3]"></a>Temp_demarcate</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, user_app.o(i.Temp_demarcate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Temp_demarcate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[72]"></a>Trig_Functions</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, mc_math.o(i.Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Model
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuCircle_Limitation
</UL>

<P><STRONG><a name="[14]"></a>UART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USER_APP_vTick10ms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, user_app.o(i.USER_APP_vTick10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USER_APP_vTick10ms &rArr; FunStateCharge
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeartNTCTemp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunStateCharge
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[d7]"></a>USER_APP_vTick1ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, user_app.o(i.USER_APP_vTick1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USER_APP_vTick1ms &rArr; EraseWriteFlash &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterControl_1ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Speed
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseWriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[da]"></a>USER_APP_vTick20ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_app.o(i.USER_APP_vTick20ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USER_APP_vTick20ms &rArr; LCD_Process &rArr; Temp_demarcate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_R_change
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_tempreture_num
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[de]"></a>USER_APP_vTick500ms</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, user_app.o(i.USER_APP_vTick500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USER_APP_vTick500ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[e2]"></a>USER_GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, user_app.o(i.USER_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USER_GPIO_Init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>USER_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, user_app.o(i.USER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USER_Init &rArr; lcd_init &rArr; lcd_show_all_clean &rArr; IIC_Write_Reg &rArr; i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Attach
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>UTimer_init</STRONG> (Thumb, 36 bytes, Stack size 96 bytes, hardware_init.o(i.UTimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UTimer_init &rArr; TIM_TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerStrutInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[cb]"></a>User2AppAngleTrans</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app2core.o(i.User2AppAngleTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = User2AppAngleTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
</UL>

<P><STRONG><a name="[7b]"></a>User2AppCurTrans</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app2core.o(i.User2AppCurTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = User2AppCurTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateRun
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateAlign
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[7e]"></a>User2AppFreqTrans</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app2core.o(i.User2AppFreqTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = User2AppFreqTrans &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateOpen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVdcSpeed
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[7d]"></a>User2AppVolTrans</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app2core.o(i.User2AppVolTrans))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = User2AppVolTrans &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
</UL>

<P><STRONG><a name="[18]"></a>WAKE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.WAKE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc03x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fluxobserve.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[8c]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fluxobserve.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[74]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, state_machine.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_State_Machine
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultCheck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>

<P><STRONG><a name="[ad]"></a>i2c_dma_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, lks32mc03x_i2c.o(i.i2c_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CHx_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[aa]"></a>i2c_dma_state_over</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lks32mc03x_i2c.o(i.i2c_dma_state_over))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>i2c_dma_tx</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lks32mc03x_i2c.o(i.i2c_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_state_start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_delay_over
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Reg
</UL>

<P><STRONG><a name="[e4]"></a>lcd_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_init &rArr; lcd_show_all_clean &rArr; IIC_Write_Reg &rArr; i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_clean
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[ec]"></a>lcd_show_all_clean</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lcd.o(i.lcd_show_all_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_show_all_clean &rArr; IIC_Write_Reg &rArr; i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[b8]"></a>lcd_show_all_data</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd.o(i.lcd_show_all_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_show_all_data &rArr; IIC_Write_Reg &rArr; i2c_dma_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[b5]"></a>lcd_show_all_number</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd.o(i.lcd_show_all_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_show_all_number &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_ones
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[b7]"></a>lcd_show_constant_temperature</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lcd.o(i.lcd_show_constant_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[ed]"></a>lcd_show_ones</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.lcd_show_ones))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_all_number
</UL>

<P><STRONG><a name="[b6]"></a>lcd_show_speed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lcd.o(i.lcd_show_speed))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[b4]"></a>lcd_show_temp_gear</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, lcd.o(i.lcd_show_temp_gear))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_show_temp_gear
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; Task_Scheduler &rArr; Sys_State_Machine &rArr; StateCharge &rArr; MCPWM_init &rArr; MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d]"></a>read_btn1_level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, user_app.o(i.read_btn1_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_btn1_level
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> user_app.o(i.USER_Init)
</UL>
<P><STRONG><a name="[ee]"></a>sys_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, system_init.o(i.sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sys_init &rArr; FluxObserveInit &rArr; FluxObserveParaCalc &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultRecoverInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentOffsetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>vLoadForFlashing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_app.o(i.vLoadForFlashing))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scheduler
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppFreqTrans
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppCurTrans
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User2AppAngleTrans
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FluxObserveParaCalc
</UL>

<P><STRONG><a name="[133]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a6]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hardware_init.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[a5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hardware_init.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[a4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardware_init.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[ea]"></a>i2c_dma_delay_over</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lks32mc03x_i2c.o(i.i2c_dma_delay_over))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx
</UL>

<P><STRONG><a name="[eb]"></a>i2c_dma_state_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lks32mc03x_i2c.o(i.i2c_dma_state_start))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dma_tx
</UL>

<P><STRONG><a name="[5f]"></a>Add_Button</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, button.o(i.Add_Button))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Create
</UL>

<P><STRONG><a name="[60]"></a>Print_Btn_Info</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, button.o(i.Print_Btn_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print_Btn_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Button
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Create
</UL>

<P><STRONG><a name="[5e]"></a>StrnCopy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, button.o(i.StrnCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StrnCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Create
</UL>

<P><STRONG><a name="[38]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[37]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
